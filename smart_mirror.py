import time
import cv2
import numpy as np

import argparse

from skimage import (data, filters, restoration, util)
import imageio

from picamera.array import PiRGBArray
from picamera import PiCamera

from rpi_ws281x import *

# LED strip configuration:
LED_COUNT      = 1024      # Number of LED pixels.
LED_PIN        = 18      # GPIO pin connected to the pixels (must support PWM!).
LED_FREQ_HZ    = 800000  # LED signal frequency in hertz (usually 800khz)
LED_DMA        = 10      # DMA channel to use for generating signal (try 10)
LED_BRIGHTNESS = 255     # Set to 0 for darkest and 255 for brightest
LED_INVERT     = False   # True to invert the signal (when using NPN transistor level shift)
LED_CHANNEL    = 0
LED_STRIP      = ws.SK6812W_STRIP

# LEDs order:
order = [312, 311, 296, 295, 280, 279, 264, 263, 504, 503, 488, 487, 472, 471, 456, 455, 56, 55, 40, 39, 24, 23, 8, 7, 248, 247, 232, 231, 216, 215, 200, 199,
313, 310, 297, 294, 281, 278, 265, 262, 505, 502, 489, 486, 473, 470, 457, 454, 57, 54, 41, 38, 25, 22, 9, 6, 249, 246, 233, 230, 217, 214, 201, 198,
314, 309, 298, 293, 282, 277, 266, 261, 506, 501, 490, 485, 474, 469, 458, 453, 58, 53, 42, 37, 26, 21, 10, 5, 250, 245, 234, 229, 218, 213, 202, 197,
315, 308, 299, 292, 283, 276, 267, 260, 507, 500, 491, 484, 475, 468, 459, 452, 59, 52, 43, 36, 27, 20, 11, 4, 251, 244, 235, 228, 219, 212, 203, 196,
316, 307, 300, 291, 284, 275, 268, 259, 508, 499, 492, 483, 476, 467, 460, 451, 60, 51, 44, 35, 28, 19, 12, 3, 252, 243, 236, 227, 220, 211, 204, 195,
317, 306, 301, 290, 285, 274, 269, 258, 509, 498, 493, 482, 477, 466, 461, 450, 61, 50, 45, 34, 29, 18, 13, 2, 253, 242, 237, 226, 221, 210, 205, 194,
318, 305, 302, 289, 286, 273, 270, 257, 510, 497, 494, 481, 478, 465, 462, 449, 62, 49, 46, 33, 30, 17, 14, 1, 254, 241, 238, 225, 222, 209, 206, 193,
319, 304, 303, 288, 287, 272, 271, 256, 511, 496, 495, 480, 479, 464, 463, 448, 63, 48, 47, 32, 31, 16, 15, 0, 255, 240, 239, 224, 223, 208, 207, 192,
320, 335, 336, 351, 352, 367, 368, 383, 384, 399, 400, 415, 416, 431, 432, 447, 64, 79, 80, 95, 96, 111, 112, 127, 128, 143, 144, 159, 160, 175, 176, 191,
321, 334, 337, 350, 353, 366, 369, 382, 385, 398, 401, 414, 417, 430, 433, 446, 65, 78, 81, 94, 97, 110, 113, 126, 129, 142, 145, 158, 161, 174, 177, 190,
322, 333, 338, 349, 354, 365, 370, 381, 386, 397, 402, 413, 418, 429, 434, 445, 66, 77, 82, 93, 98, 109, 114, 125, 130, 141, 146, 157, 162, 173, 178, 189,
323, 332, 339, 348, 355, 364, 371, 380, 387, 396, 403, 412, 419, 428, 435, 444, 67, 76, 83, 92, 99, 108, 115, 124, 131, 140, 147, 156, 163, 172, 179, 188,
324, 331, 340, 347, 356, 363, 372, 379, 388, 395, 404, 411, 420, 427, 436, 443, 68, 75, 84, 91, 100, 107, 116, 123, 132, 139, 148, 155, 164, 171, 180, 187,
325, 330, 341, 346, 357, 362, 373, 378, 389, 394, 405, 410, 421, 426, 437, 442, 69, 74, 85, 90, 101, 106, 117, 122, 133, 138, 149, 154, 165, 170, 181, 186,
326, 329, 342, 345, 358, 361, 374, 377, 390, 393, 406, 409, 422, 425, 438, 441, 70, 73, 86, 89, 102, 105, 118, 121, 134, 137, 150, 153, 166, 169, 182, 185,
327, 328, 343, 344, 359, 360, 375, 376, 391, 392, 407, 408, 423, 424, 439, 440, 71, 72, 87, 88, 103, 104, 119, 120, 135, 136, 151, 152, 167, 168, 183, 184,
824, 823, 808, 807, 792, 791, 776, 775, 1016, 1015, 1000, 999, 984, 983, 968, 967, 568, 567, 552, 551, 536, 535, 520, 519, 760, 759, 744, 743, 728, 727, 712, 711,
825, 822, 809, 806, 793, 790, 777, 774, 1017, 1014, 1001, 998, 985, 982, 969, 966, 569, 566, 553, 550, 537, 534, 521, 518, 761, 758, 745, 742, 729, 726, 713, 710,
826, 821, 810, 805, 794, 789, 778, 773, 1018, 1013, 1002, 997, 986, 981, 970, 965, 570, 565, 554, 549, 538, 533, 522, 517, 762, 757, 746, 741, 730, 725, 714, 709,
827, 820, 811, 804, 795, 788, 779, 772, 1019, 1012, 1003, 996, 987, 980, 971, 964, 571, 564, 555, 548, 539, 532, 523, 516, 763, 756, 747, 740, 731, 724, 715, 708,
828, 819, 812, 803, 796, 787, 780, 771, 1020, 1011, 1004, 995, 988, 979, 972, 963, 572, 563, 556, 547, 540, 531, 524, 515, 764, 755, 748, 739, 732, 723, 716, 707,
829, 818, 813, 802, 797, 786, 781, 770, 1021, 1010, 1005, 994, 989, 978, 973, 962, 573, 562, 557, 546, 541, 530, 525, 514, 765, 754, 749, 738, 733, 722, 717, 706,
830, 817, 814, 801, 798, 785, 782, 769, 1022, 1009, 1006, 993, 990, 977, 974, 961, 574, 561, 558, 545, 542, 529, 526, 513, 766, 753, 750, 737, 734, 721, 718, 705,
831, 816, 815, 800, 799, 784, 783, 768, 1023, 1008, 1007, 992, 991, 976, 975, 960, 575, 560, 559, 544, 543, 528, 527, 512, 767, 752, 751, 736, 735, 720, 719, 704,
832, 847, 848, 863, 864, 879, 880, 895, 896, 911, 912, 927, 928, 943, 944, 959, 576, 591, 592, 607, 608, 623, 624, 639, 640, 655, 656, 671, 672, 687, 688, 703,
833, 846, 849, 862, 865, 878, 881, 894, 897, 910, 913, 926, 929, 942, 945, 958, 577, 590, 593, 606, 609, 622, 625, 638, 641, 654, 657, 670, 673, 686, 689, 702,
834, 845, 850, 861, 866, 877, 882, 893, 898, 909, 914, 925, 930, 941, 946, 957, 578, 589, 594, 605, 610, 621, 626, 637, 642, 653, 658, 669, 674, 685, 690, 701,
835, 844, 851, 860, 867, 876, 883, 892, 899, 908, 915, 924, 931, 940, 947, 956, 579, 588, 595, 604, 611, 620, 627, 636, 643, 652, 659, 668, 675, 684, 691, 700,
836, 843, 852, 859, 868, 875, 884, 891, 900, 907, 916, 923, 932, 939, 948, 955, 580, 587, 596, 603, 612, 619, 628, 635, 644, 651, 660, 667, 676, 683, 692, 699,
837, 842, 853, 858, 869, 874, 885, 890, 901, 906, 917, 922, 933, 938, 949, 954, 581, 586, 597, 602, 613, 618, 629, 634, 645, 650, 661, 666, 677, 682, 693, 698,
838, 841, 854, 857, 870, 873, 886, 889, 902, 905, 918, 921, 934, 937, 950, 953, 582, 585, 598, 601, 614, 617, 630, 633, 646, 649, 662, 665, 678, 681, 694, 697,
839, 840, 855, 856, 871, 872, 887, 888, 903, 904, 919, 920, 935, 936, 951, 952, 583, 584, 599, 600, 615, 616, 631, 632, 647, 648, 663, 664, 679, 680, 695, 696]

# initialize the camera and grab a reference to the raw camera capture
camera = PiCamera()
camera.resolution = (32, 32)
camera.framerate = 40
rawCapture = PiRGBArray(camera, size=(32, 32))
backSub = cv2.createBackgroundSubtractorMOG2()

pos_in_colormap = 0
shading_level = 0.3


def wheel(pos, bp):
    # Generate rainbow colors across 0-255 positions:
    if pos < 85:
        return Color(int((pos * 3)*shading_level), int((255 - pos * 3)*shading_level), bp)
    elif pos < 170:
        pos -= 85
        return Color(int((255 - pos * 3)*shading_level), bp, int((pos * 3)*shading_level))
    else:
        pos -= 170
        return Color(bp, int((pos * 3)*shading_level), int((255 - pos * 3)*shading_level))


if __name__ == '__main__':
	strip = Adafruit_NeoPixel(LED_COUNT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS, LED_CHANNEL, LED_STRIP)
	strip.begin()
	
	print ('Press Ctrl-C to quit.')
	
	while True:
		for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
			image = frame.array
			rotated = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)
			fgMask = backSub.apply(rotated, learningRate=0.01)
			img = cv2.flip(fgMask,1)
			for i in range(32):
				for j in range(32):
					strip.setPixelColor(order[i*32+j], wheel(pos_in_colormap, int(img[i,j])))
			strip.show()
			pos_in_colormap = pos_in_colormap+1
			if pos_in_colormap == 255:
				pos_in_colormap = 0
			rawCapture.truncate(0)
